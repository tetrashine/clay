import Draggable from 'displays/draggable';
import Link from 'displays/link';
import { Point, NodePoint, NodeConfig, NodeAttribute } from 'types/index';
import INode from 'interfaces/inode';
declare class Node extends Draggable implements INode {
    private _doc;
    private _config;
    private _width;
    private _height;
    private _editable;
    private _inputCount;
    private _outputCount;
    private _attrs;
    private _links;
    private _inputLinks;
    private _outputLinks;
    private _menuState;
    private _index;
    private _selectedText;
    private _inputs;
    private _outputs;
    private _text;
    private _bg;
    constructor(doc: any, config: NodeConfig);
    _dragFn(): void;
    validateNodeTemplate(inputs: string[], outputs: string[]): void;
    validateIoType(type: string): boolean;
    addLink(link: Link, type: string): void;
    deleteLink(link: Link): void;
    setFillColor(color?: string): void;
    setFontColor(fontColor: string): void;
    initialize(doc: any, config: NodeConfig): void;
    destroy(): void;
    select(): void;
    unselect(): void;
    drawMenu(open?: boolean): void;
    generateTable(perm: Array<Array<string>>, attrs: NodeAttribute[]): any;
    toEditable(attrs: NodeAttribute[]): NodeAttribute[];
    drawOrRefreshTable(): void;
    redrawMenu(open: boolean): void;
    getPermAttributes(): Array<Array<string>>;
    getAttributes(): NodeAttribute[];
    appendWithDeleteBtn(arr: NodeAttribute[]): string[][];
    appendIconAttrs(icon: any): void;
    calculateTextSize(doc: any, font: string, txt: string): any;
    setXY(point: Point): void;
    _setXY({ x, y }: Point): void;
    addXY(dx: number, dy: number): void;
    getFaceCoords(): NodePoint[];
    getFaceCoord(side: string): NodePoint;
    isTextEditable(): boolean;
    makeDefaultTextEditable(): void;
    exportAsJson(): NodeConfig;
    getInputCoord(index: number): Point;
    getInputCoordByIndex(index: number): Point;
    getOutputCoord(index: number): Point;
    getOutputCoordByIndex(index: number): Point;
    setInputColor(): void;
    getIndex(): number;
    setIndex(index: number): void;
    resetColor(): void;
    calcInputCoords(xOffset?: number, yOffset?: number): Point[];
    calcOutputCoords(xOffset?: number, yOffset?: number): Point[];
    drawInputLinkables(onLinkConstruct?: (node: any, index: number) => void): void;
    drawOutputLinkables(onLinkConstruct?: (node: any, index: number) => void): void;
    removeLinkables(): void;
    generateIoLinks(doc: any, index: number, coords: Point, onLinkConstruct: (node: any, index: number) => void): any;
    get outputCount(): number;
}
export default Node;
